/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package qlbanhang;

import java.sql.*;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import source.DBKetnoi;

public class KHJPanel extends javax.swing.JPanel {

    final String header[] = {"MAKH", "TENKH", "THANHPHO", "DIACHI", "SDT"};
    final DefaultTableModel tb = new DefaultTableModel(header, 0);
    DBKetnoi cn = new DBKetnoi();
    Connection conn;
    private ResultSet rs;

    public KHJPanel() {
        initComponents();
        loadBang();
    }

    public void loadBang() {
        try {
            conn = DBKetnoi.getConnection();
            int number;
            Vector row;
            String sql = "SELECT * FROM KHACHHANG";
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            ResultSetMetaData metadata = rs.getMetaData();
            number = metadata.getColumnCount();
            tb.setRowCount(0);
            while (rs.next()) {
                row = new Vector();
                for (int i = 1; i <= number; i++) {
                    row.add(rs.getString(i));
                }
                tb.addRow(row);
                TableKH.setModel(tb);
            }
            st.close();
            rs.close();
            conn.close();
        } catch (Exception e) {
        }
        TableKH.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (TableKH.getSelectedRow() >= 0) {
                    txtmkh.setText(TableKH.getValueAt(TableKH.getSelectedRow(), 0) + "");
                    txttkh.setText(TableKH.getValueAt(TableKH.getSelectedRow(), 1) + "");
                    txttp.setText(TableKH.getValueAt(TableKH.getSelectedRow(), 2) + "");
                    txtdc.setText(TableKH.getValueAt(TableKH.getSelectedRow(), 3) + "");
                    txtsdtkh.setText(TableKH.getValueAt(TableKH.getSelectedRow(), 4) + "");
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpnkh = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtmkh = new javax.swing.JTextField();
        txttkh = new javax.swing.JTextField();
        txttp = new javax.swing.JTextField();
        txtdc = new javax.swing.JTextField();
        txtsdtkh = new javax.swing.JTextField();
        cmdthem = new javax.swing.JButton();
        cmdsua = new javax.swing.JButton();
        cmdxoa = new javax.swing.JButton();
        cmdtimkiem = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableKH = new javax.swing.JTable();
        cmddau = new javax.swing.JButton();
        cmdtrai = new javax.swing.JButton();
        cmdphai = new javax.swing.JButton();
        cmdcuoi = new javax.swing.JButton();
        cmdtailai = new javax.swing.JButton();

        jpnkh.setBackground(new java.awt.Color(255, 255, 51));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("THÔNG TIN KHÁCH HÀNG");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 51));
        jLabel2.setText("Mã Khách Hàng:");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 0, 51));
        jLabel3.setText("Tên Khách Hàng:");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 0, 51));
        jLabel4.setText("Thành Phố:");

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 0, 51));
        jLabel8.setText("Địa Chỉ:");

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 0, 51));
        jLabel9.setText("SĐT:");

        txtmkh.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtmkh.setForeground(new java.awt.Color(0, 153, 153));

        txttkh.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txttkh.setForeground(new java.awt.Color(0, 153, 153));

        txttp.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txttp.setForeground(new java.awt.Color(0, 153, 153));

        txtdc.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtdc.setForeground(new java.awt.Color(0, 153, 153));

        txtsdtkh.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtsdtkh.setForeground(new java.awt.Color(0, 153, 153));

        cmdthem.setBackground(new java.awt.Color(102, 255, 255));
        cmdthem.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        cmdthem.setForeground(new java.awt.Color(255, 255, 255));
        cmdthem.setText("Thêm");
        cmdthem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdthemActionPerformed(evt);
            }
        });

        cmdsua.setBackground(new java.awt.Color(102, 255, 102));
        cmdsua.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        cmdsua.setForeground(new java.awt.Color(255, 0, 51));
        cmdsua.setText("Sửa");
        cmdsua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdsuaActionPerformed(evt);
            }
        });

        cmdxoa.setBackground(new java.awt.Color(255, 204, 204));
        cmdxoa.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        cmdxoa.setText("Xóa");
        cmdxoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdxoaActionPerformed(evt);
            }
        });

        cmdtimkiem.setBackground(new java.awt.Color(102, 255, 255));
        cmdtimkiem.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        cmdtimkiem.setForeground(new java.awt.Color(0, 51, 204));
        cmdtimkiem.setText("Tìm Kiếm");
        cmdtimkiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdtimkiemActionPerformed(evt);
            }
        });

        TableKH.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "MAKH", "TENKH", "THANHPHO", "DIACHI", "SDT"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        TableKH.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableKHMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TableKH);

        cmddau.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        cmddau.setText("<<");
        cmddau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmddauActionPerformed(evt);
            }
        });

        cmdtrai.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        cmdtrai.setText("<");
        cmdtrai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdtraiActionPerformed(evt);
            }
        });

        cmdphai.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        cmdphai.setText(">");
        cmdphai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdphaiActionPerformed(evt);
            }
        });

        cmdcuoi.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        cmdcuoi.setText(">>");
        cmdcuoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdcuoiActionPerformed(evt);
            }
        });

        cmdtailai.setBackground(new java.awt.Color(255, 255, 51));
        cmdtailai.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        cmdtailai.setForeground(new java.awt.Color(204, 0, 255));
        cmdtailai.setText("Tải Lại");
        cmdtailai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdtailaiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpnkhLayout = new javax.swing.GroupLayout(jpnkh);
        jpnkh.setLayout(jpnkhLayout);
        jpnkhLayout.setHorizontalGroup(
            jpnkhLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnkhLayout.createSequentialGroup()
                .addGap(154, 154, 154)
                .addComponent(jLabel1)
                .addGap(0, 462, Short.MAX_VALUE))
            .addGroup(jpnkhLayout.createSequentialGroup()
                .addGroup(jpnkhLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpnkhLayout.createSequentialGroup()
                        .addGap(166, 166, 166)
                        .addComponent(cmddau)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdtrai, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdphai, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdcuoi))
                    .addGroup(jpnkhLayout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addGroup(jpnkhLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpnkhLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel4)
                                .addComponent(jLabel8)
                                .addComponent(jLabel2))
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpnkhLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtsdtkh, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtdc, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txttp, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txttkh, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtmkh, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpnkhLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmdtailai, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmdthem, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmdsua, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmdxoa, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmdtimkiem)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 652, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpnkhLayout.setVerticalGroup(
            jpnkhLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnkhLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpnkhLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtmkh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(cmdthem))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpnkhLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txttkh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(cmdsua))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpnkhLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txttp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(cmdxoa))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpnkhLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtdc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(cmdtimkiem))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpnkhLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtsdtkh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(cmdtailai))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpnkhLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmddau)
                    .addComponent(cmdtrai)
                    .addComponent(cmdphai)
                    .addComponent(cmdcuoi))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpnkh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpnkh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    public void xoatrang() {
        txtmkh.setText("");
        txttkh.setText("");
        txttp.setText("");
        txtdc.setText("");
        txtsdtkh.setText("");
        loadBang();
        txtmkh.setEnabled(true);
    }
    private void cmdthemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdthemActionPerformed
        try {
            conn = DBKetnoi.getConnection();
            if (txtmkh.getText().equals("") || txttkh.getText().equals("") || txttp.getText().equals("") || txtdc.getText().equals("") || txtsdtkh.getText().equals("")) {
                JOptionPane.showConfirmDialog(this, "Bạn cần nhập đủ dữ liệu");
            } else {
                StringBuffer sb = new StringBuffer();
                String sql_check_pk = "SELECT MAKH FROM KHACHHANG WHERE MAKH = N'" + txtmkh.getText() + "'";
                Statement st = conn.createStatement();
                rs = st.executeQuery(sql_check_pk);
                if (rs.next()) {
                    sb.append("Khách hàng này đã tồn tại!");
                }
                if (sb.length() > 0) {
                    JOptionPane.showMessageDialog(this, sb.toString());
                } else {
                    String sql = "INSERT INTO KHACHHANG VALUES(N'" + txtmkh.getText() + "',N'" + txttkh.getText() + "',N'" + txttp.getText() + "',N'" + txtdc.getText() + "',N'" + txtsdtkh.getText() + "')";
                    st = conn.createStatement();
                    int kg = st.executeUpdate(sql);
                    if (kg > 0) {
                        JOptionPane.showMessageDialog(this, "Thêm mới thành công!");
                        xoatrang();
                    }
                }
            }
        } catch (Exception e) {

        }
    }//GEN-LAST:event_cmdthemActionPerformed

    private void cmdsuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdsuaActionPerformed
        try {
            conn = DBKetnoi.getConnection();
            if (txttkh.getText().equals("") || txttp.getText().equals("") || txtdc.getText().equals("") || txtsdtkh.getText().equals("")) {
                JOptionPane.showConfirmDialog(this, "Bạn cần nhập đủ dữ liệu");
            } else {
                Statement st = conn.createStatement();
                String sql = "UPDATE KHACHHANG SET TENKH = N'" + txttkh.getText() + "', DIACHI = N'" + txtdc.getText() + "', THANHPHO = N'" + txttp.getText() + "', SDT = N'" + txtsdtkh.getText() + "' WHERE MAKH = N'" + txtmkh.getText() + "'";
                st = conn.createStatement();
                int kg = st.executeUpdate(sql);
                if (kg > 0) {
                    JOptionPane.showMessageDialog(this, "Cập nhật thành công!");
                    xoatrang();
                }
                st.close();
            }
            conn.close();
            rs.close();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_cmdsuaActionPerformed

    private void TableKHMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableKHMouseClicked
        int x = TableKH.getSelectedRow();
        if (x >= 0) {
            txtmkh.setText(TableKH.getValueAt(x, 0) + "");
            txttkh.setText(TableKH.getValueAt(x, 1) + "");
            txttp.setText(TableKH.getValueAt(x, 2) + "");
            txtdc.setText(TableKH.getValueAt(x, 3) + "");
            txtsdtkh.setText(TableKH.getValueAt(x, 4) + "");
            txtmkh.setEnabled(false);
        }
    }//GEN-LAST:event_TableKHMouseClicked

    private void cmdxoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdxoaActionPerformed
        try {
            conn = DBKetnoi.getConnection();
            String sql = "DELETE KHACHHANG WHERE MAKH = N'" + txtmkh.getText() + "'";
            Statement st = conn.createStatement();
            int chk = JOptionPane.showConfirmDialog(this, "Bạn có chắc xóa chứ?", "Thông báo", JOptionPane.YES_NO_OPTION);
            if (chk == JOptionPane.YES_NO_OPTION) {
                st.executeUpdate(sql);
                xoatrang();
                JOptionPane.showMessageDialog(this, "Xóa thành công!");
            }

        } catch (Exception e) {

        }
    }//GEN-LAST:event_cmdxoaActionPerformed
    public void getSelectFirst() {
        int selectedRow = 0;
        txtmkh.setText(TableKH.getValueAt(TableKH.getSelectedRow(), 0).toString());
        txttkh.setText(TableKH.getValueAt(TableKH.getSelectedRow(), 1).toString());
        txttp.setText(TableKH.getValueAt(TableKH.getSelectedRow(), 2).toString());
        txtdc.setText(TableKH.getValueAt(TableKH.getSelectedRow(), 3).toString());
        txtsdtkh.setText(TableKH.getValueAt(TableKH.getSelectedRow(), 4).toString());
        TableKH.setRowSelectionInterval(0, 0);
    }

    public void getSelectPrevious() {
        if (TableKH.getSelectedRow() >= 1) {
            int selectedRow = TableKH.getSelectedRow() - 1;
            txtmkh.setText(TableKH.getValueAt(TableKH.getSelectedRow(), 0).toString());
            txttkh.setText(TableKH.getValueAt(TableKH.getSelectedRow(), 1).toString());
            txttp.setText(TableKH.getValueAt(TableKH.getSelectedRow(), 2).toString());
            txtdc.setText(TableKH.getValueAt(TableKH.getSelectedRow(), 3).toString());
            txtsdtkh.setText(TableKH.getValueAt(TableKH.getSelectedRow(), 4).toString());
            TableKH.setRowSelectionInterval(selectedRow, selectedRow);
        }
    }

    public void getSelectNext() {
        if (TableKH.getSelectedRow() < TableKH.getRowCount() - 1) {
            int selectedRow = TableKH.getSelectedRow() + 1;
            txtmkh.setText(TableKH.getValueAt(TableKH.getSelectedRow(), 0).toString());
            txttkh.setText(TableKH.getValueAt(TableKH.getSelectedRow(), 1).toString());
            txttp.setText(TableKH.getValueAt(TableKH.getSelectedRow(), 2).toString());
            txtdc.setText(TableKH.getValueAt(TableKH.getSelectedRow(), 3).toString());
            txtsdtkh.setText(TableKH.getValueAt(TableKH.getSelectedRow(), 4).toString());
            TableKH.setRowSelectionInterval(selectedRow, selectedRow);
        }
    }

    public void getSelectLast() {
        int selectedRow = TableKH.getRowCount() - 1;
        txtmkh.setText(TableKH.getValueAt(TableKH.getSelectedRow(), 0).toString());
        txttkh.setText(TableKH.getValueAt(TableKH.getSelectedRow(), 1).toString());
        txttp.setText(TableKH.getValueAt(TableKH.getSelectedRow(), 2).toString());
        txtdc.setText(TableKH.getValueAt(TableKH.getSelectedRow(), 3).toString());
        txtsdtkh.setText(TableKH.getValueAt(TableKH.getSelectedRow(), 4).toString());
        TableKH.setRowSelectionInterval(selectedRow, selectedRow);
    }
    private void cmddauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmddauActionPerformed
        getSelectFirst();
    }//GEN-LAST:event_cmddauActionPerformed

    private void cmdtraiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdtraiActionPerformed
        getSelectPrevious();
    }//GEN-LAST:event_cmdtraiActionPerformed

    private void cmdphaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdphaiActionPerformed
        getSelectNext();
    }//GEN-LAST:event_cmdphaiActionPerformed

    private void cmdcuoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdcuoiActionPerformed
        getSelectLast();
    }//GEN-LAST:event_cmdcuoiActionPerformed

    private void cmdtimkiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdtimkiemActionPerformed
        int size = TableKH.getRowCount();
        String makh = JOptionPane.showInputDialog(this, "Nhập vào Mã Khách Hàng cần tìm:");
        for (int i = 0; i < size; i++) {
            if (TableKH.getValueAt(i, 0).toString().equalsIgnoreCase(makh)) {
                JOptionPane.showMessageDialog(this, "Tìm kiếm thành công!");
                txtmkh.setEnabled(false);
                TableKH.setRowSelectionInterval(i, i);
                break;
            }
        }
    }//GEN-LAST:event_cmdtimkiemActionPerformed

    private void cmdtailaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdtailaiActionPerformed
        loadBang();
        xoatrang();
    }//GEN-LAST:event_cmdtailaiActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TableKH;
    private javax.swing.JButton cmdcuoi;
    private javax.swing.JButton cmddau;
    private javax.swing.JButton cmdphai;
    private javax.swing.JButton cmdsua;
    private javax.swing.JButton cmdtailai;
    private javax.swing.JButton cmdthem;
    private javax.swing.JButton cmdtimkiem;
    private javax.swing.JButton cmdtrai;
    private javax.swing.JButton cmdxoa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel jpnkh;
    private javax.swing.JTextField txtdc;
    private javax.swing.JTextField txtmkh;
    private javax.swing.JTextField txtsdtkh;
    private javax.swing.JTextField txttkh;
    private javax.swing.JTextField txttp;
    // End of variables declaration//GEN-END:variables
}
